

#include <stdio.h>
#include <ctype.h>
#define SIZE 100
char stack[SIZE];
int top = -1;
void push(char ch) {
    stack[++top] = ch;
}
char pop() {
    return stack[top--];
}
int precedence(char op) {
    if (op == '^') return 3;
    if (op == '*' || op == '/') return 2;
    if (op == '+' || op == '-') return 1;
    return 0;
}
void infixToPostfix(char* exp) {
    char *e = exp;
    while (*e != '\0') {
        if (isalnum(*e)) {
            printf("%c", *e);
        } else if (*e == '(') {
            push(*e);
        } else if (*e == ')') {
            while (stack[top] != '(') printf("%c", pop());
            pop(); // remove '('
        } else {
            while (top != -1 && precedence(stack[top]) >= precedence(*e))
                printf("%c", pop());
            push(*e);
        }
        e++;
    }
    while (top != -1) printf("%c", pop());
}
int main() {
    char exp[] = "a+b*(c^d-e)^(f+g*h)-i";
    printf("Postfix: ");
    infixToPostfix(exp);
    printf("\n");
    return 0;
}

OUTPUT:
Stack is Empty
Stack: 10 20 
Top Element: 20
Popped: 20
Stack: 10 